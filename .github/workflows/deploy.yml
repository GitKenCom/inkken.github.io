name: Auto Deploy to GitHub Pages
on:
  push:
    branches: [ main ]  # 触发分支
    paths:              # 优化触发范围
      - 'docs/**'
      - 'blog/**'
      - 'src/**'
      - 'docusaurus.config.js'
  workflow_dispatch:   # 支持手动触发

# 核心权限配置
permissions:
  contents: write      # 仓库写入权限
  pages: write         # Pages操作权限
  id-token: write      # 必须添加！解决token权限问题

jobs:
  deploy:
    runs-on: ubuntu-22.04  # 指定稳定环境版本
    
    steps:
      # 1. 代码检出（带完整历史）
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整提交历史
          
      # 2. Node.js环境配置（带缓存）
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"  # 精确匹配本地版本
          cache: "yarn"        # 缓存依赖加速构建
      
      # 3. 解决browserslist警告
      - name: Update browserslist
        run: npx update-browserslist-db@latest
        
      # 4. 安装依赖（锁定版本）
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      # 5. 深度清理旧构建（关键修复）
      - name: Clean previous build
        run: rm -rf build .docusaurus .cache/
        
      # 6. 项目构建
      - name: Build site
        run: yarn build
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"  # 防止内存溢出
          
      # ▶▶▶ 7. 手动Token部署配置（核心）◀◀◀
      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3.9.3  # 指定稳定版本
        with:
          # 手动Token配置（与您截图中的失败任务一致）
          token: ${{ secrets.DEPLOY_TOKEN }}  # 从仓库Secrets读取
          
          # 增强配置选项
          publish_branch: gh-pages   # 目标分支
          publish_dir: ./build       # 构建输出目录
          keep_files: false          # 清理旧文件
          force_orphan: true         # 强制重置分支（关键！）